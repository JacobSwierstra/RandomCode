/* 
 * Author: Luke Hindman
 * Date: Thu 05 Nov 2020 08:10:44 AM PST
 * Description:  Adapted from the Simple Directory Lister Mark II example
 *    provided in the libc manual.
 * https://www.gnu.org/software/libc/manual/html_node/Simple-Directory-Lister-Mark-II.html
 */
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>

#define UNUSED(x) (void)x
#define MAX_PATH_LENGTH 4096

int noSort(const struct dirent ** entryA, const struct dirent **entryB){
    UNUSED(entryA);
    UNUSED(entryB);
    return 0;
}

int zuluSort(const struct dirent ** entryA, const struct dirent **entryB){
    return alphasort(entryB, entryA);
}

static int defaultFilter(const struct dirent *current) {
    UNUSED(current);
    return 1;
}

static int showAll(const struct dirent *current) {
    UNUSED(current);
    return 1;
}

static int showFilesOnly(const struct dirent *current) {
    UNUSED(current);
    return 1;
}

int main (int argc, char * argv[]) {
    struct dirent **eps;
    int n;
    int opt;

    /* Declare filterFunction pointer */
    int (*filterFunction)(const struct dirent *);
    filterFunction = defaultFilter;

    /* Declare sortFunction pointer */
    int (*sortFunction)(const struct dirent **, const struct dirent **);
    sortFunction = noSort;

    /* Delcare dirPath and set default to current directory */
    char dirPath[MAX_PATH_LENGTH];
    strcpy(dirPath,"./");

    /* Use getOpt() to process command line args */
    while((opt = getopt(argc, argv, "d:safrh")) != -1){
        switch(opt){
            case 'd':
                strncpy(dirPath,optarg,MAX_PATH_LENGTH);
                break;
            case 's':
                sortFunction = alphasort;
                break;
            case 'a'://enable or disable displaying hidden files.
                filterFunction = showAll;
                break;
            case 'f'://enable or disable displaying directories
                filterFunction = showFilesOnly;
                break;
            case 'r'://same as s but reverse order (decending)
                sortFunction = zuluSort;
                break;
            case 'h':
                printf("Usage: ./myls [-d <path>] [-s] [-a] [-f] [-r]\n-d <path> Directory to list the contents of\n-a      Display all files, including hidden files\n-f      Display only regular files\n-r      Display entries alphabetically in descending order\n-s          Display entries alphabetically in ascending order");
                exit(0);
                break;
            default:
                fprintf(stdout,"Error: Invalid option specified\n");
                fprintf(stdout,"USAGE: %s [-d <path>]\n", argv[0]);
                exit(1);
                break;
        }
    }

    /* Perform scan dir to dirpath*/
    errno = 0;
    n = scandir (dirPath, &eps, filterFunction, sortFunction);
    

    /* validate directory was opened successfully */
    if (n < 0) {
        perror("scandir: ");
        exit(1);
    }

    int cnt;
    for (cnt = 0; cnt < n; ++cnt) {
        fprintf(stderr,"%s\n", eps[cnt]->d_name);
    }

    /* Clean up memory */
    for(int i = 0; i<n;i++){
        free(eps[i]);
    }
    free (eps);

    return 0;
}
